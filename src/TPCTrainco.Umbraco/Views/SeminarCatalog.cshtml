@using TPCTrainco.Umbraco.Extensions
@using TPCTrainco.Umbraco.Extensions.Helpers
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "Base.cshtml";

    IPublishedContent siteSettings = Nodes.Instance.SiteSettings;
    IPublishedContent currentPage = Model.Content;
    IPublishedContent parentPage = currentPage.Parent;

    IEnumerable<IPublishedContent> seminarCategories = null;
    IPublishedContent onsitePromo = null;
    IEnumerable<IPublishedContent> activeSeminarList = null;
    IEnumerable<IPublishedContent> userQuoteList = null;
    List<COURS> courseList = null;
    List<Country> countryList = null;

    try
    {
        seminarCategories = parentPage.Children.Where(p => p.DocumentTypeAlias != "SeminarCatalog").OrderBy("SortOrder");

        onsitePromo = siteSettings.GetPropertyValue<IPublishedContent>("activePromo");
        activeSeminarList = currentPage.GetPropertyValue<IEnumerable<IPublishedContent>>("activeSeminars");
        userQuoteList = currentPage.GetPropertyValue<IEnumerable<IPublishedContent>>("userQuotes");
        courseList = TPCTrainco.Umbraco.Extensions.Objects.CacheObjects.GetCourseList();
        countryList = TPCTrainco.Umbraco.Extensions.Objects.CacheObjects.GetCountryList();
    }
    catch (Exception ex)
    {
        Response.RedirectPermanent("/public-seminars/course-catalog/");
    }
}

<div class="container-fluid headline-section">
    <div class="container">
        <div class="jumbotron">
            <h1>@(currentPage.GetPropertyValue<string>("pageHeadline", currentPage.Name))</h1>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-xs-12 col-sm-10 col-sm-offset-1 catalog-top">
            @Html.Raw(currentPage.GetPropertyValue<string>("mainContent"))

            <ul class="col-md-8 col-md-offset-2">
                @if (seminarCategories != null && seminarCategories.Any())
                {
                    foreach (IPublishedContent item in seminarCategories)
                    {
                        string colClass = "col-md-3";
                        string menuText = item.GetPropertyValue<string>("shortName", item.Name);
                        string anchorText = menuText.ToUrlSegment();

                        if (menuText.Length > 22)
                        {
                            colClass = "col-md-4";
                        }
                        else if (menuText.Length < 8)
                        {
                            colClass = "col-md-2";
                        }

                        <li class="col-xs-6 @(colClass)"><a href="#@(anchorText)" class="regular-link class-category">@(menuText)</a></li>
                    }
                }
            </ul>
        </div>

        <div class="col-xs-12 country-toggle">
            <a href="#" data-country-sort="ca" data-active-country="us"><img src="/images/icon-canada-flag.png" class="flag-icon" /> Click to view Canadian seminars</a>
        </div>

    </div>
</div>

<div class="container">

    @if (seminarCategories != null && seminarCategories.Any())
    {
        foreach (IPublishedContent item in seminarCategories)
        {
            string menuText = item.GetPropertyValue<string>("shortName", item.Name);
            string anchorText = menuText.ToUrlSegment();
            bool isElectrical = item.Name.IndexOf("Electrical") >= 0;

            <div class="col-xs-12 course-section@(true == isElectrical ? " electric" : "")">
                <div class="row">
                    <div class="col-md-9 offset">
                        <a href="@item.Url">
                            <h2 id="@(anchorText)">@(menuText)</h2>
                        </a>

                        @if (true == isElectrical)
                    {
                            <ul class="sort">
                                <li class="current col-xs-6 col-md-2"><a href="#" class="elec-sort-category regular-link" data-category="all">All</a></li>
                                @foreach (IPublishedContent subItem in item.Children)
                                {

                                    string subMenuText = subItem.GetPropertyValue<string>("shortName", subItem.Name);
                                    string subAnchorText = subMenuText.ToUrlSegment();

                                    <li class="col-xs-6 col-md-3"><a href="#" class="elec-sort-category regular-link" data-category="@(subAnchorText)">@(subMenuText)</a></li>
                                }
                            </ul>

                            <p class="elec-description">@(item.GetPropertyValue<string>("pageTitle"))</p>
                        }
                        else
                        {
                            <p>@(item.GetPropertyValue<string>("pageTitle"))</p>
                        }


                    </div>

                    <ul class="col-xs-12">
                        @if (true == isElectrical)
                    {
                        foreach (IPublishedContent subItem in item.Children)
                        {
                            string subMenuText = subItem.GetPropertyValue<string>("shortName", subItem.Name);
                            string subAnchorText = subMenuText.ToUrlSegment();

                            foreach (IPublishedContent subSubItem in subItem.Children)
                            {
                                string imageUrl = subSubItem.GetCropUrl("image", "Image");
                                string countryName = GetCountryName(countryList, subSubItem);

                                if (true == string.IsNullOrEmpty(imageUrl) || (imageUrl.IndexOf(".jpg") < 0 && imageUrl.IndexOf(".png") < 0))
                                {
                                    imageUrl = "/images/selectall-icon.jpg";
                                }

                                <li class="seminar-topic col-xs-6 col-sm-4 col-md-3" data-type="@(subAnchorText)" data-country="@(countryName)">
                                    <a href="@(subSubItem.Url)">
                                        <div class="overlay-contain">
                                            <div class="overlay"></div>
                                            <img src="@(imageUrl)" alt="@(subSubItem.GetPropertyValue<string>("pageTitle", subItem.Name))" />
                                        </div>
                                        <p>@(subSubItem.GetPropertyValue<string>("pageTitle", subItem.Name))</p>
                                    </a>
                                </li>
                                }
                            }
                        }
                        else
                        {
                            foreach (IPublishedContent subItem in item.Children)
                            {
                                string imageUrl = subItem.GetCropUrl("image", "Image");
                                string countryName = GetCountryName(countryList, subItem);

                                if (true == string.IsNullOrEmpty(imageUrl) || (imageUrl.IndexOf(".jpg") < 0 && imageUrl.IndexOf(".png") < 0))
                                {
                                    imageUrl = "/images/selectall-icon.jpg";
                                }

                                <li class="seminar-topic col-xs-6 col-sm-4 col-md-3" data-country="@(countryName)">
                                    <a href="@(subItem.Url)">
                                        <div class="overlay-contain">
                                            <div class="overlay"></div>
                                            <img src="@(imageUrl)" alt="@(subItem.GetPropertyValue<string>("pageTitle", subItem.Name))" />
                                        </div>
                                        <p>@(subItem.GetPropertyValue<string>("pageTitle", subItem.Name))</p>
                                    </a>
                                </li>
                            }
                        }

                    </ul>
                </div>
            </div>
        }
    }
</div>

@functions {
    public static string GetCountryName(List<Country> countries, IPublishedContent node)
    {
        int courseId = 0;
        COURS course = null;
        string countryName = "us";

        if (node.HasValue("courseLink"))
        {
            courseId = node.GetPropertyValue<int>("courseLink");

            course = TPCTrainco.Umbraco.Extensions.Objects.CacheObjects.GetCourseList().Where(p => p.CourseID == courseId).FirstOrDefault();

            //Canada courses can have a countryID of 1 so this code will not work unless DB updates are made.
            //if (course != null && course.CountryID > 0)
            //{
            //    Country country = countries.Where(p => p.Seq == course.CountryID).FirstOrDefault();

            //    countryName = country.CountryCode.ToLower();
            //}

            if (course != null && course.TitlePlain.IndexOf("Canada") >= 0)
            {
                countryName = "ca";
            }
        }

        return countryName;
    }
}
